using System.Linq;
using System.Numerics;
using Content.Client.Guidebook;
using Content.Client.Humanoid;
using Content.Client.Lobby;
using Content.Client.Lobby.UI;
using Content.Client.Message;
using Content.Client.Players.PlayTimeTracking;
using Content.Client.Stylesheets;
using Content.Client.UserInterface.Controls;
using Content.Client.UserInterface.Systems.Guidebook;
using Content.Shared.CCVar;
using Content.Shared.Clothing;
using Content.Shared.GameTicking;
using Content.Shared.Humanoid;
using Content.Shared.Humanoid.Markings;
using Content.Shared.Humanoid.Prototypes;
using Content.Shared.Preferences;
using Content.Shared.Preferences.Loadouts;
using Content.Shared.Preferences.Loadouts.Effects;
using Content.Shared.Roles;
using Content.Shared.Traits;
using Robust.Shared.GameStates;
using Robust.Shared.ComponentTrees;
using Robust.Client.ComponentTrees;
using Robust.Client.AutoGenerated;
using Robust.Client.GameObjects;
using Robust.Client.Graphics;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Client.Utility;
using Robust.Shared.Configuration;
using Robust.Shared.Enums;
using Robust.Shared.Prototypes;
using Robust.Shared.Utility;
using Direction = Robust.Shared.Maths.Direction;
using Robust.Client.ResourceManagement;
using Content.Client.Resources;
using Content.Shared.Chemistry.Reaction;

namespace Content.Client._Crescent
{
    [GenerateTypedNameReferences]
    public sealed partial class FactionSelectorGui : BoxContainer
    {
        private readonly IClientPreferencesManager _prefsMan;
        private readonly IPrototypeManager _prototypeManager;
        [Dependency] private readonly SpriteSystem _sprite = default!;
        [Dependency] private readonly EntityManager _entities = default!;
        private readonly IResourceCache _resourceCache = default!;
        private CharacterSetupGui gui = default!;
        public HumanoidCharacterProfile? Profile;
        public int? index;

        public event Action<HumanoidCharacterProfile, int >? Save;
        private BoxContainer _factionList => CFactionList;

        public void SetProfile(HumanoidCharacterProfile? profile, int? slot)
        {
            Profile = profile?.Clone();
            index = slot;
        }

        public FactionSelectorGui(IClientPreferencesManager preferencesManager, IPrototypeManager prototypeManager, CharacterSetupGui setupUI)
        {
            RobustXamlLoader.Load(this);
            _prefsMan = preferencesManager;
            gui = setupUI;
            _prototypeManager = prototypeManager;
            UpdateUI();

        }

        private void SetFaction(FactionPrototype faction)
        {
            if (Profile is null)
                return;

            Profile = Profile.WithFaction(faction.ID);
        }

        protected override void Dispose(bool disposing)
        {
            base.Dispose(disposing);
            if (!disposing)
                return;
        }
        public void UpdateUI()
        {
            if (!_prefsMan.ServerDataLoaded)
                return;
            _factionList.RemoveAllChildren();
            var factions = _prototypeManager.EnumeratePrototypes<FactionPrototype>().ToArray();
            // sorts the factions by their weight
            factions = factions.OrderByDescending(x => x.Weight).ToArray();
            foreach (var faction in factions)
            {
                if (!faction.Enabled)
                    continue;

                var factionButton = new Button();
                // SHORTENED FOR UI's sake
                factionButton.Text = faction.ID;

                factionButton.ModulateSelfOverride = faction.FactionButtonColor;

                var factionName = new Label();
                factionName.HorizontalAlignment = HAlignment.Center;
                var factionPhoto = new TextureRect();
                factionPhoto.Stretch = TextureRect.StretchMode.Scale;
                var factionDescPrefix = new Label();
                var factionDesc = new Label();
                factionDescPrefix.FontColorOverride = Color.Red;
                factionDescPrefix.HorizontalAlignment = HAlignment.Center;
                factionDescPrefix.Align = Label.AlignMode.Center;
                factionDesc.MaxWidth = 1012f;
                factionDesc.HorizontalAlignment = HAlignment.Center;
                factionButton.OnPressed += _ =>
                {
                    SetFaction(faction);
                    FactionInfo.RemoveAllChildren();
                    factionDescPrefix.Text = faction.DescriptionPrefix;
                    factionDesc.Text = faction.Description;
                    factionPhoto.Texture = faction.Icon.Frame0();
                    factionPhoto.SetHeight = 189f;
                    factionPhoto.SetWidth = 1012f;
                    FactionInfo.AddChild(factionPhoto);
                    FactionInfo.AddChild(factionDescPrefix);
                    FactionInfo.AddChild(factionDesc);
                };
                _factionList.AddChild(factionButton);

            }
            var confirmButton = new Button();
            var separator = new PanelContainer();
            separator.ModulateSelfOverride = Color.Black;
            separator.SetHeight = 10f;
            confirmButton.Text = "Confirm";
            confirmButton.SetHeight = 50f;
            confirmButton.ModulateSelfOverride = Color.Red;
            confirmButton.OnPressed += _ =>
            {
                SaveCharacter();
            };
            _factionList.AddChild(separator);
            _factionList.AddChild(confirmButton);
        }

        public void SaveCharacter()
        {
            if (Profile is null)
                return;
            if (!_prefsMan.ServerDataLoaded)
                return;
            if (index is null)
                return;
            Save?.Invoke(Profile, index.Value);
            gui.SwitchToCharacterEditor();
        }

    }
}
